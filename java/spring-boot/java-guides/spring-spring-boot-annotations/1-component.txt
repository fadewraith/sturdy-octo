The @Component annotation indicates that an annotated class is a "spring bean/component".
The @Component annotation tells Spring container to automatically create Spring bean.

Spring offers 3 types of configuration styles - 
	XML based
	Annotation based
	Java based

start.spring.io

@Component annotation tells spring IOC container to automaticall automatically create the wspring bean for the specified class and manage that spring bean, we dont have to create object of the specified class manually using new k/w. Spring container takes a control to automatically create the spring bean and manage that spring bean for us. So spring IOC container also calledinogenic contril because spring container takes a control to automatically create the objects and manage those objects for us.

Within main method, we have the run method called so the run method returns the application context object. Basically application context acts as a spring container.
	var context = ;
	ClassName className = context.getBean(ClassName.class);
	sout(className.methodName());

By default spring container will give name to the spring bean as a class name but the first letter of the class name will be in a lower case and we can also give explicitly to the spring bean by passing value to the @Component("explicitlyDefinedName") - 
	context.getBean("explicitlyDefinedName"); // we'll get the bean name and provide the casting
	// we can also pass the default class name
	context.getBean("className");

Spring IOC container takes care of creating and managing the objects of the class for us.